version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telegram-ai-bot-postgres
    environment:
      POSTGRES_DB: telegram_ai_bot
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/:ro
    ports:
      - "15432:5432"
    networks:
      - telegram-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d telegram_ai_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: telegram-ai-bot-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - telegram-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram AI Bot (Full Version)
  bot:
    image: python:3.11-slim
    container_name: telegram-ai-bot
    working_dir: /app
    command: >
        sh -c "
          pip install python-telegram-bot aiohttp sqlalchemy asyncpg alembic psycopg2-binary redis pydantic pydantic-settings &&
          python ai_bot.py
        "
    volumes:
      - .:/app
    environment:
      # Telegram Configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_ADMIN_IDS: ${TELEGRAM_ADMIN_IDS}
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/telegram_ai_bot
      DATABASE_POOL_SIZE: 10
      DATABASE_MAX_OVERFLOW: 20
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_MAX_CONNECTIONS: 20
      
      # Security Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # AI Model Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # Rate Limiting
      RATE_LIMIT_GLOBAL: 100
      RATE_LIMIT_USER: 10
      RATE_LIMIT_WINDOW: 60
      
      # Context Management
      CONTEXT_MAX_MESSAGES: 20
      CONTEXT_TTL: 900
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      
      # Application
      DEBUG: false
      HOST: 0.0.0.0
      PORT: 8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telegram-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: telegram-ai-bot-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - telegram-bot-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Admin (RedisInsight)
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: telegram-ai-bot-redisinsight
    ports:
      - "8001:8001"
    networks:
      - telegram-bot-network
    restart: unless-stopped
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  telegram-bot-network:
    driver: bridge
